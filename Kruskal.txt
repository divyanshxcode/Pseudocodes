kruskal(graph):
    sort edges by weight  
    initialize disjoint-set  
    mst = []  
    for each edge (u, v, weight) in graph:
        if find(u) != find(v):  # Check if in same set
            mst.append((u, v, weight))  # Add to MST
            union(u, v)  # Union sets
    return mst 

find(vertex):
    if parent[vertex] != vertex:  # If not root
        parent[vertex] = find(parent[vertex])  # Path compression
    return parent[vertex]

union(u, v):
    root_u = find(u)  
    root_v = find(v)
    if root_u != root_v:  # If different roots
        if rank[root_u] > rank[root_v]:  
            parent[root_v] = root_u  # Attach root_v to root_u
        else if rank[root_u] < rank[root_v]: 
            parent[root_u] = root_v  # Attach root_u to root_v
        else:
            parent[root_v] = root_u  # Attach root_v to root_u
            rank[root_u] += 1  